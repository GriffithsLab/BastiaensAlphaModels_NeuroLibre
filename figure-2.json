{"kind":"Notebook","sha256":"03d7c63e9efe7a532b8af6702a4413cfe7fc1a76bb437f7d31ec27a1dba04694","slug":"figure-2","location":"/content/figure_2.md","dependencies":[],"frontmatter":{"title":"Jupyter Notebooks are fun, but...","kernelspec":{"name":"python3","display_name":"Python 3"},"content_includes_title":true,"authors":[{"nameParsed":{"literal":"Sorenza P. Bastiaens","given":"Sorenza P.","family":"Bastiaens"},"name":"Sorenza P. Bastiaens","orcid":"0009-0008-6665-1419","corresponding":true,"equal_contributor":true,"email":"sorenza.bastiaens@gmail.com","roles":["Paper author","Research Contribution"],"affiliations":["UToronto, CAMH"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"John D. Griffiths","given":"John D.","family":"Griffiths"},"name":"John D. Griffiths","orcid":"0000-0002-1764-2179","equal_contributor":true,"email":"john.griffiths@utoronto.ca","roles":["Project administration","Writing – review & editing"],"affiliations":["UToronto, CAMH"],"github":"JohnGriffiths","url":"https://www.grifflab.com","note":"PENDING","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Davide Momi","given":"Davide","family":"Momi"},"name":"Davide Momi","equal_contributor":true,"email":"davide.momi@camh.ca","roles":["Methodology","Data curation","Writing – review & editing"],"affiliations":["CAMH, Stanford"],"twitter":"DaveMomi","github":"Davi1990","url":"https://davi1990.github.io/","note":"PENDING","id":"contributors-myst-generated-uid-2"}],"doi":"10.55458/neurolibre.xxxxx","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/GriffithsLab/BastiaensAlphaModels_NeuroLibre","subject":"Living Preprint","venue":{"title":"Neurolibre"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true}},"keywords":["reproducible publishing","mystmd","next-gen preprints"],"affiliations":[{"id":"UToronto, CAMH","name":"UToronto, CAMH"},{"id":"CAMH, Stanford","name":"CAMH, Stanford"},{"id":"UToronto","name":"University of Toronto","department":"Medical Sciences","city":"Toronto","state":"Ontario","country":"Canada"},{"id":"Stanford","name":"Stanford University Medical Center, Stanford","department":"Department of Psychiatry and Behavioral Sciences","address":"401 Quarry Road, Stanford, CA","city":"California","postal_code":"94305-5717","country":"United States of America","isni":"PENDING","ror":"PENDING","phone":"1 (650) 723-6643"},{"id":"CAMH","name":"Centre for Addiction and Mental Health","department":"Krembil Centre for Neuroinformatics","address":"250 College Street","city":"Toronto","state":"Ontario","postal_code":"M5T 1R8","country":"Canada","isni":"PENDING","ror":"PENDING","phone":"PENDING"}],"abbreviations":{"MyST":"Markedly Structured Markdown"},"exports":[{"format":"md","filename":"figure_2.md","url":"/BastiaensAlphaModels_NeuroLibre/build/figure_2-716ea286644d90f40bdaa759f1d9b9c3.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":1,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Jupyter Notebooks are fun, but...","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"XF3WudnEbD"}],"identifier":"jupyter-notebooks-are-fun-but","label":"Jupyter Notebooks are fun, but...","html_id":"jupyter-notebooks-are-fun-but","implicit":true,"enumerator":"1","key":"wCecAi41U0"},{"type":"blockquote","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"They not necessarily the best format for comparing changes across commits.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"rq5f3SDu3w"}],"key":"PA9EvPYoIX"}],"key":"TcbraYkllh"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"A more diff-friendly way to write your executable content is to use a markdown file with code blocks!","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"RLkYMrBlwA"}],"key":"AjBG0oUDf6"},{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Kernel Specification","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"GPIqLv1Lbk"}],"key":"ltsqkL5pRh"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"As you can see at the top of the file, we have a kernel specification in the front matter of the file. This tells ","key":"KPtE2DlGWP"},{"type":"abbreviation","title":"Markedly Structured Markdown","children":[{"type":"text","value":"MyST","key":"j5W1gW9UvM"}],"key":"YJSGfLU58H"},{"type":"text","value":" builder to use the ","key":"FWv5HOxXj9"},{"type":"inlineCode","value":"python3","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ybNVhBw0jN"},{"type":"text","value":" kernel for executing the code cells. Needless to say, the specified kernel must be available in your runtime environment (","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"OJMhFNXByb"},{"type":"inlineCode","value":"binder","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"siBLygSB5j"},{"type":"text","value":" folder).","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"rtjqaibbJZ"}],"key":"uUDE9vzVVH"}],"key":"XmvEPbLgke"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"The blow code cell importing libraries wil not be visible in the rendered ","key":"iVhtbV1IzD"},{"type":"abbreviation","title":"Markedly Structured Markdown","children":[{"type":"text","value":"MyST","key":"Qiw1Gmh2nR"}],"key":"MatvMZKIXV"},{"type":"text","value":" document, because we have specified the ","key":"E5vnvaLZgF"},{"type":"inlineCode","value":"remove-input","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"Nee2sLTp30"},{"type":"text","value":" tag. You can find the full documentation on executable markdown files ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"QQRtE1U1aD"},{"type":"link","url":"https://mystmd.org/guide/notebooks-with-markdown#kernel-specification","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"NX1s6NT8mI"}],"urlSource":"https://mystmd.org/guide/notebooks-with-markdown#kernel-specification","key":"AR5S9nit0q"},{"type":"text","value":".","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"xmO8uDS1Wv"}],"key":"nCsljaiEU0"}],"key":"tGtueBNN6u"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import plotly.graph_objects as go\nimport networkx as nx\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype\"\n\nG = nx.random_geometric_graph(200, 0.125)","visibility":"remove","key":"KZYHE5Qr4G"},{"type":"output","id":"FmG9mdbVWE-30M5QJIiX8","data":[],"visibility":"show","key":"BIjseRbVMd"}],"data":{"tags":[]},"visibility":"show","key":"jDV1FH7KCH"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Now onto the next code cell, which will be visible in the rendered document.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"ahHNKJPjg2"}],"key":"qYWbZ3mpSc"}],"key":"BV7y9PuYsa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"edge_x = []\nedge_y = []\nfor edge in G.edges():\n    x0, y0 = G.nodes[edge[0]]['pos']\n    x1, y1 = G.nodes[edge[1]]['pos']\n    edge_x.append(x0)\n    edge_x.append(x1)\n    edge_x.append(None)\n    edge_y.append(y0)\n    edge_y.append(y1)\n    edge_y.append(None)\n\nedge_trace = go.Scatter(\n    x=edge_x, y=edge_y,\n    line=dict(width=0.5, color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\nnode_x = []\nnode_y = []\nfor node in G.nodes():\n    x, y = G.nodes[node]['pos']\n    node_x.append(x)\n    node_y.append(y)\n\nnode_trace = go.Scatter(\n    x=node_x, y=node_y,\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        # colorscale options\n        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |\n        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |\n        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |\n        colorscale='YlGnBu',\n        reversescale=True,\n        color=[],\n        size=10,\n        colorbar=dict(\n            thickness=15,\n            title='Node Connections',\n            xanchor='left',\n            titleside='right'\n        ),\n        line_width=2))\n\nnode_adjacencies = []\nnode_text = []\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_adjacencies.append(len(adjacencies[1]))\n    node_text.append('# of connections: '+str(len(adjacencies[1])))\n\nnode_trace.marker.color = node_adjacencies\nnode_trace.text = node_text","key":"xWER8CmRkw"},{"type":"output","id":"MgzGcOX3VrxpBH5afZfSm","data":[],"key":"BIK0dhDAA5"}],"data":{},"key":"snN3NSwdpu"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"The next code cell will be generating the output we are interested in! We will ","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"xwI0jXgk1l"},{"type":"inlineCode","value":"label","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"lsSY0SVnX3"},{"type":"text","value":" it, so that we can embed its output in the body of our main ","key":"dVFkLJhIzg"},{"type":"abbreviation","title":"Markedly Structured Markdown","children":[{"type":"text","value":"MyST","key":"OxjWL9TglS"}],"key":"ayGKbJQVuj"},{"type":"text","value":" article. That being said, depending on the purpose of your document (e.g., if you’d like to use the ","key":"S0L9Z4CNKI"},{"type":"inlineCode","value":"book-theme","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"T1pzNzmpgp"},{"type":"text","value":" for an interactive tutorial) you may not be interested in embedding the output of a code cell.","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"p43KL0U30r"}],"key":"E7dTjfuk9x"}],"key":"QiU5pwfdn6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                height = 600, \n                title='<br>Network graph made with Python',\n                titlefont_size=16,\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=20,l=5,r=5,t=40),\n                annotations=[ dict(\n                    text=\"Python code: <a href='https://plotly.com/python/network-graphs/'> https://plotly.com/python/network-graphs/</a>\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\",\n                    x=0.005, y=-0.002 ) ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))\n                )\nfig.show()","identifier":"fig2cell-code","enumerator":"1","html_id":"fig2cell-code","key":"HplImqwJy6"},{"type":"output","id":"OdwHNRpll1wI6PFSb9l2j","data":[],"identifier":"fig2cell-output","html_id":"fig2cell-output","key":"U157zDjWjL"}],"data":{},"label":"fig2cell","identifier":"fig2cell","html_id":"fig2cell","key":"NCuLFMCADZ"}],"key":"jSNjsCzc2C"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Figure 1","url":"/figure-1","group":"A comprehensive investigation of intracortical and corticothalamic models of alpha rhythms"}}},"domain":"http://localhost:3000"}